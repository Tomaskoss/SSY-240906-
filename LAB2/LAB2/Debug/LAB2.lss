
LAB2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800200  0000041a  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000041a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a49  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000148c  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f0  00000000  00000000  00003521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00003b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009f8  00000000  00000000  00003c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ab  00000000  00000000  0000461c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000049c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	31 c1       	rjmp	.+610    	; 0x268 <__vector_1>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	9c c0       	rjmp	.+312    	; 0x162 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	9a c0       	rjmp	.+308    	; 0x162 <__bad_interrupt>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	5a c0       	rjmp	.+180    	; 0x162 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	58 c0       	rjmp	.+176    	; 0x162 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	56 c0       	rjmp	.+172    	; 0x162 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	54 c0       	rjmp	.+168    	; 0x162 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	52 c0       	rjmp	.+164    	; 0x162 <__bad_interrupt>
  be:	00 00       	nop
  c0:	50 c0       	rjmp	.+160    	; 0x162 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	4e c0       	rjmp	.+156    	; 0x162 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	4c c0       	rjmp	.+152    	; 0x162 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	4a c0       	rjmp	.+148    	; 0x162 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	48 c0       	rjmp	.+144    	; 0x162 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	46 c0       	rjmp	.+140    	; 0x162 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	44 c0       	rjmp	.+136    	; 0x162 <__bad_interrupt>
  da:	00 00       	nop
  dc:	42 c0       	rjmp	.+132    	; 0x162 <__bad_interrupt>
  de:	00 00       	nop
  e0:	40 c0       	rjmp	.+128    	; 0x162 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	3e c0       	rjmp	.+124    	; 0x162 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	3c c0       	rjmp	.+120    	; 0x162 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	3a c0       	rjmp	.+116    	; 0x162 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	38 c0       	rjmp	.+112    	; 0x162 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	36 c0       	rjmp	.+108    	; 0x162 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	34 c0       	rjmp	.+104    	; 0x162 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	32 c0       	rjmp	.+100    	; 0x162 <__bad_interrupt>
  fe:	00 00       	nop
 100:	30 c0       	rjmp	.+96     	; 0x162 <__bad_interrupt>
 102:	00 00       	nop
 104:	2e c0       	rjmp	.+92     	; 0x162 <__bad_interrupt>
 106:	00 00       	nop
 108:	2c c0       	rjmp	.+88     	; 0x162 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	2a c0       	rjmp	.+84     	; 0x162 <__bad_interrupt>
 10e:	00 00       	nop
 110:	28 c0       	rjmp	.+80     	; 0x162 <__bad_interrupt>
 112:	00 00       	nop
 114:	26 c0       	rjmp	.+76     	; 0x162 <__bad_interrupt>
 116:	00 00       	nop
 118:	24 c0       	rjmp	.+72     	; 0x162 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	22 c0       	rjmp	.+68     	; 0x162 <__bad_interrupt>
 11e:	00 00       	nop
 120:	20 c0       	rjmp	.+64     	; 0x162 <__bad_interrupt>
 122:	00 00       	nop
 124:	1e c0       	rjmp	.+60     	; 0x162 <__bad_interrupt>
 126:	00 00       	nop
 128:	1c c0       	rjmp	.+56     	; 0x162 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	1a c0       	rjmp	.+52     	; 0x162 <__bad_interrupt>
 12e:	00 00       	nop
 130:	18 c0       	rjmp	.+48     	; 0x162 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
 144:	12 e0       	ldi	r17, 0x02	; 2
 146:	a0 e0       	ldi	r26, 0x00	; 0
 148:	b2 e0       	ldi	r27, 0x02	; 2
 14a:	ea e1       	ldi	r30, 0x1A	; 26
 14c:	f4 e0       	ldi	r31, 0x04	; 4
 14e:	00 e0       	ldi	r16, 0x00	; 0
 150:	0b bf       	out	0x3b, r16	; 59
 152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
 154:	07 90       	elpm	r0, Z+
 156:	0d 92       	st	X+, r0
 158:	a4 3e       	cpi	r26, 0xE4	; 228
 15a:	b1 07       	cpc	r27, r17
 15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>
 15e:	ac d0       	rcall	.+344    	; 0x2b8 <main>
 160:	5a c1       	rjmp	.+692    	; 0x416 <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <USART_Init>:
	USART_SendString("\033[31m");  // Escape sekvence pro ?ervenou barvu
}

/* Funkce pro resetování barvy textu */
void reset_color(void) {
	USART_SendString("\033[0m");  // Escape sekvence pro resetování barvy
 164:	9c 01       	movw	r18, r24
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	60 e2       	ldi	r22, 0x20	; 32
 16c:	71 ea       	ldi	r23, 0xA1	; 161
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	13 d1       	rcall	.+550    	; 0x39a <__divmodsi4>
 174:	21 50       	subi	r18, 0x01	; 1
 176:	31 09       	sbc	r19, r1
 178:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7c00cd>
 17c:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7c00cc>
 180:	88 e1       	ldi	r24, 0x18	; 24
 182:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7c00c9>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7c00ca>
 18c:	08 95       	ret

0000018e <USART_Transmit>:
 18e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 192:	95 ff       	sbrs	r25, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <USART_Transmit>
 196:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 19a:	08 95       	ret

0000019c <USART_SendString>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <USART_SendString+0xc>
 1a4:	21 96       	adiw	r28, 0x01	; 1
 1a6:	f3 df       	rcall	.-26     	; 0x18e <USART_Transmit>
 1a8:	88 81       	ld	r24, Y
 1aa:	81 11       	cpse	r24, r1
 1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <USART_SendString+0x8>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <USART_Receive>:
 1b4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7c00c8>
 1b8:	88 23       	and	r24, r24
 1ba:	e4 f7       	brge	.-8      	; 0x1b4 <USART_Receive>
 1bc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
 1c0:	08 95       	ret

000001c2 <clear_screen>:
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	92 e0       	ldi	r25, 0x02	; 2
 1c6:	ea cf       	rjmp	.-44     	; 0x19c <USART_SendString>
 1c8:	08 95       	ret

000001ca <set_red>:
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	92 e0       	ldi	r25, 0x02	; 2
 1ce:	e6 cf       	rjmp	.-52     	; 0x19c <USART_SendString>
 1d0:	08 95       	ret

000001d2 <LED_Blink>:
}

void LED_Blink(void) {
	DDRB = 0b01110000;  // Nastavení pin? 4, 5, 6 jako výstupy
 1d2:	80 e7       	ldi	r24, 0x70	; 112
 1d4:	84 b9       	out	0x04, r24	; 4
	setbit(PORTB, 4);
 1d6:	85 b1       	in	r24, 0x05	; 5
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	84 e3       	ldi	r24, 0x34	; 52
 1e0:	9c e0       	ldi	r25, 0x0C	; 12
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <LED_Blink+0x10>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <LED_Blink+0x1a>
 1ec:	00 00       	nop
	_delay_ms(500);
	clearbit(PORTB, 4);
 1ee:	85 b1       	in	r24, 0x05	; 5
 1f0:	8f 7e       	andi	r24, 0xEF	; 239
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	2f ef       	ldi	r18, 0xFF	; 255
 1f6:	84 e3       	ldi	r24, 0x34	; 52
 1f8:	9c e0       	ldi	r25, 0x0C	; 12
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <LED_Blink+0x28>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LED_Blink+0x32>
 204:	00 00       	nop
	_delay_ms(500);
	setbit(PORTB, 5);
 206:	85 b1       	in	r24, 0x05	; 5
 208:	80 62       	ori	r24, 0x20	; 32
 20a:	85 b9       	out	0x05, r24	; 5
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	84 e3       	ldi	r24, 0x34	; 52
 210:	9c e0       	ldi	r25, 0x0C	; 12
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <LED_Blink+0x40>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LED_Blink+0x4a>
 21c:	00 00       	nop
	_delay_ms(500);
	clearbit(PORTB, 5);
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	85 b9       	out	0x05, r24	; 5
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	84 e3       	ldi	r24, 0x34	; 52
 228:	9c e0       	ldi	r25, 0x0C	; 12
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <LED_Blink+0x58>
 232:	00 c0       	rjmp	.+0      	; 0x234 <LED_Blink+0x62>
 234:	00 00       	nop
	_delay_ms(500);
	setbit(PORTB, 6);
 236:	85 b1       	in	r24, 0x05	; 5
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	85 b9       	out	0x05, r24	; 5
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	84 e3       	ldi	r24, 0x34	; 52
 240:	9c e0       	ldi	r25, 0x0C	; 12
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <LED_Blink+0x70>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <LED_Blink+0x7a>
 24c:	00 00       	nop
	_delay_ms(500);
	clearbit(PORTB, 6);
 24e:	85 b1       	in	r24, 0x05	; 5
 250:	8f 7b       	andi	r24, 0xBF	; 191
 252:	85 b9       	out	0x05, r24	; 5
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	84 e3       	ldi	r24, 0x34	; 52
 258:	9c e0       	ldi	r25, 0x0C	; 12
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <LED_Blink+0x88>
 262:	00 c0       	rjmp	.+0      	; 0x264 <LED_Blink+0x92>
 264:	00 00       	nop
 266:	08 95       	ret

00000268 <__vector_1>:
	_delay_ms(500);
}

// P?eruení pro detekci stisku tla?ítka
ISR(INT0_vect) {
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	0b b6       	in	r0, 0x3b	; 59
 274:	0f 92       	push	r0
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
	USART_Transmit('1');  // Odeslání znaku '1' p?i stisku tla?ítka
 28e:	81 e3       	ldi	r24, 0x31	; 49
 290:	7e df       	rcall	.-260    	; 0x18e <USART_Transmit>
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0b be       	out	0x3b, r0	; 59
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <main>:

int main(void) {
 2b8:	cf 93       	push	r28
	// Inicializace USART s baudrate 38400
	USART_Init(38400);
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	52 df       	rcall	.-348    	; 0x164 <USART_Init>

	// Povoleni globalnich preruseni
	sei();
 2c0:	78 94       	sei

	// Nastavení tla?ítka jako vstup
	DDRD &= ~(1 << BUTTON_PIN);  // Nastavení pin PD2 jako vstup
 2c2:	8a b1       	in	r24, 0x0a	; 10
 2c4:	8b 7f       	andi	r24, 0xFB	; 251
 2c6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << BUTTON_PIN);  // Aktivace pull-up rezistoru
 2c8:	8b b1       	in	r24, 0x0b	; 11
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	8b b9       	out	0x0b, r24	; 11

	// Povoleni p?eruení pro tla?ítko (INT0)
	EIMSK |= (1 << INT0);    // Povolení p?eruení INT0
 2ce:	8d b3       	in	r24, 0x1d	; 29
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC01);   // Nastavení p?eruení na pokles signálu (aktivní low)
 2d4:	e9 e6       	ldi	r30, 0x69	; 105
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
	// Nastavení ?ervené barvy pro celý text
	set_red();
 2dc:	80 83       	st	Z, r24
 2de:	75 df       	rcall	.-278    	; 0x1ca <set_red>

	// Zobrazení MENU s popisem voleb
	USART_SendString("MENU:\r\n");
 2e0:	80 e1       	ldi	r24, 0x10	; 16
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	5b df       	rcall	.-330    	; 0x19c <USART_SendString>
	USART_SendString("0: Ukonceni programu\r\n");
 2e6:	88 e1       	ldi	r24, 0x18	; 24
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	58 df       	rcall	.-336    	; 0x19c <USART_SendString>
	USART_SendString("1: Vypis male abecedy\r\n");
 2ec:	8f e2       	ldi	r24, 0x2F	; 47
 2ee:	92 e0       	ldi	r25, 0x02	; 2
 2f0:	55 df       	rcall	.-342    	; 0x19c <USART_SendString>
	USART_SendString("2: Vypis velke abecedy\r\n");
 2f2:	87 e4       	ldi	r24, 0x47	; 71
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	52 df       	rcall	.-348    	; 0x19c <USART_SendString>
	USART_SendString("3: Blikani LED 3x\r\n");
 2f8:	80 e6       	ldi	r24, 0x60	; 96
 2fa:	92 e0       	ldi	r25, 0x02	; 2
 2fc:	4f df       	rcall	.-354    	; 0x19c <USART_SendString>
	USART_SendString("4: Vymazat obrazovku a zobrazit MENU\r\n");
 2fe:	84 e7       	ldi	r24, 0x74	; 116
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	4c df       	rcall	.-360    	; 0x19c <USART_SendString>
 304:	57 df       	rcall	.-338    	; 0x1b4 <USART_Receive>

	while (1) {
		uint8_t recv = USART_Receive();  // Cekáme na p?íkaz od uivatele
 306:	82 33       	cpi	r24, 0x32	; 50
 308:	e1 f0       	breq	.+56     	; 0x342 <main+0x8a>

		// Reakce na vstupy
		switch (recv) {
 30a:	30 f4       	brcc	.+12     	; 0x318 <main+0x60>
 30c:	80 33       	cpi	r24, 0x30	; 48
 30e:	09 f4       	brne	.+2      	; 0x312 <main+0x5a>
 310:	3d c0       	rjmp	.+122    	; 0x38c <main+0xd4>
 312:	81 33       	cpi	r24, 0x31	; 49
 314:	51 f0       	breq	.+20     	; 0x32a <main+0x72>
 316:	36 c0       	rjmp	.+108    	; 0x384 <main+0xcc>
 318:	83 33       	cpi	r24, 0x33	; 51
 31a:	d9 f0       	breq	.+54     	; 0x352 <main+0x9a>
 31c:	84 33       	cpi	r24, 0x34	; 52
 31e:	f1 f0       	breq	.+60     	; 0x35c <main+0xa4>
 320:	31 c0       	rjmp	.+98     	; 0x384 <main+0xcc>
 322:	8c 2f       	mov	r24, r28
			return 0;
			
			case '1':
			// Vypis male abecedy
			for (char c = 'a'; c <= 'z'; c++) {
				USART_Transmit(c);
 324:	34 df       	rcall	.-408    	; 0x18e <USART_Transmit>
 326:	cf 5f       	subi	r28, 0xFF	; 255
			USART_SendString("Program ukoncen.\r\n");
			return 0;
			
			case '1':
			// Vypis male abecedy
			for (char c = 'a'; c <= 'z'; c++) {
 328:	01 c0       	rjmp	.+2      	; 0x32c <main+0x74>

	while (1) {
		uint8_t recv = USART_Receive();  // Cekáme na p?íkaz od uivatele

		// Reakce na vstupy
		switch (recv) {
 32a:	c1 e6       	ldi	r28, 0x61	; 97
			USART_SendString("Program ukoncen.\r\n");
			return 0;
			
			case '1':
			// Vypis male abecedy
			for (char c = 'a'; c <= 'z'; c++) {
 32c:	cb 37       	cpi	r28, 0x7B	; 123
 32e:	c8 f3       	brcs	.-14     	; 0x322 <main+0x6a>
				USART_Transmit(c);
			}
			USART_Transmit('\r');
 330:	8d e0       	ldi	r24, 0x0D	; 13
 332:	2d df       	rcall	.-422    	; 0x18e <USART_Transmit>
 334:	8a e0       	ldi	r24, 0x0A	; 10
			USART_Transmit('\n');
 336:	2b df       	rcall	.-426    	; 0x18e <USART_Transmit>
 338:	e5 cf       	rjmp	.-54     	; 0x304 <main+0x4c>
			break;
 33a:	8c 2f       	mov	r24, r28
			
			case '2':
			// Vypis velke abecedy
			for (char c = 'A'; c <= 'Z'; c++) {
				USART_Transmit(c);
 33c:	28 df       	rcall	.-432    	; 0x18e <USART_Transmit>
 33e:	cf 5f       	subi	r28, 0xFF	; 255
			USART_Transmit('\n');
			break;
			
			case '2':
			// Vypis velke abecedy
			for (char c = 'A'; c <= 'Z'; c++) {
 340:	01 c0       	rjmp	.+2      	; 0x344 <main+0x8c>
 342:	c1 e4       	ldi	r28, 0x41	; 65
 344:	cb 35       	cpi	r28, 0x5B	; 91
				USART_Transmit(c);
			}
			USART_Transmit('\r');
 346:	c8 f3       	brcs	.-14     	; 0x33a <main+0x82>
 348:	8d e0       	ldi	r24, 0x0D	; 13
			USART_Transmit('\n');
 34a:	21 df       	rcall	.-446    	; 0x18e <USART_Transmit>
 34c:	8a e0       	ldi	r24, 0x0A	; 10
			break;
			
			case '3':
			// Blikání LED
			USART_SendString("Blikani LED.\r\n");
 34e:	1f df       	rcall	.-450    	; 0x18e <USART_Transmit>
 350:	d9 cf       	rjmp	.-78     	; 0x304 <main+0x4c>
 352:	8e ea       	ldi	r24, 0xAE	; 174
			LED_Blink();
 354:	92 e0       	ldi	r25, 0x02	; 2
			break;
 356:	22 df       	rcall	.-444    	; 0x19c <USART_SendString>
			
			case '4':
			// Vymazání obrazovky a zobrazení menu
			clear_screen();
 358:	3c df       	rcall	.-392    	; 0x1d2 <LED_Blink>
			USART_SendString("MENU:\r\n");
 35a:	d4 cf       	rjmp	.-88     	; 0x304 <main+0x4c>
 35c:	32 df       	rcall	.-412    	; 0x1c2 <clear_screen>
 35e:	80 e1       	ldi	r24, 0x10	; 16
			USART_SendString("0: Ukonceni programu\r\n");
 360:	92 e0       	ldi	r25, 0x02	; 2
 362:	1c df       	rcall	.-456    	; 0x19c <USART_SendString>
 364:	88 e1       	ldi	r24, 0x18	; 24
			USART_SendString("1: Vypis male abecedy\r\n");
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	19 df       	rcall	.-462    	; 0x19c <USART_SendString>
 36a:	8f e2       	ldi	r24, 0x2F	; 47
 36c:	92 e0       	ldi	r25, 0x02	; 2
			USART_SendString("2: Vypis velke abecedy\r\n");
 36e:	16 df       	rcall	.-468    	; 0x19c <USART_SendString>
 370:	87 e4       	ldi	r24, 0x47	; 71
 372:	92 e0       	ldi	r25, 0x02	; 2
 374:	13 df       	rcall	.-474    	; 0x19c <USART_SendString>
			USART_SendString("3: Blikani LED 3x\r\n");
 376:	80 e6       	ldi	r24, 0x60	; 96
 378:	92 e0       	ldi	r25, 0x02	; 2
 37a:	10 df       	rcall	.-480    	; 0x19c <USART_SendString>
 37c:	84 e7       	ldi	r24, 0x74	; 116
			USART_SendString("4: Vymazat obrazovku a zobrazit MENU\r\n");
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	0d df       	rcall	.-486    	; 0x19c <USART_SendString>
 382:	c0 cf       	rjmp	.-128    	; 0x304 <main+0x4c>
 384:	8d eb       	ldi	r24, 0xBD	; 189
			break;
 386:	92 e0       	ldi	r25, 0x02	; 2

			default:
			// Oet?ení neznámého vstupu
			USART_SendString("Neznamy vstup, zadejte hodnotu 0-4.\r\n");
 388:	09 df       	rcall	.-494    	; 0x19c <USART_SendString>
 38a:	bc cf       	rjmp	.-136    	; 0x304 <main+0x4c>
 38c:	8b e9       	ldi	r24, 0x9B	; 155
 38e:	92 e0       	ldi	r25, 0x02	; 2
			break;
 390:	05 df       	rcall	.-502    	; 0x19c <USART_SendString>

		// Reakce na vstupy
		switch (recv) {
			case '0':
			// Ukon?ení programu
			USART_SendString("Program ukoncen.\r\n");
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <__divmodsi4>:
			break;
		}
	}

	return 0;
 39a:	05 2e       	mov	r0, r21
 39c:	97 fb       	bst	r25, 7
 39e:	16 f4       	brtc	.+4      	; 0x3a4 <__divmodsi4+0xa>
 3a0:	00 94       	com	r0
 3a2:	0f d0       	rcall	.+30     	; 0x3c2 <__negsi2>
 3a4:	57 fd       	sbrc	r21, 7
 3a6:	05 d0       	rcall	.+10     	; 0x3b2 <__divmodsi4_neg2>
 3a8:	14 d0       	rcall	.+40     	; 0x3d2 <__udivmodsi4>
 3aa:	07 fc       	sbrc	r0, 7
 3ac:	02 d0       	rcall	.+4      	; 0x3b2 <__divmodsi4_neg2>
 3ae:	46 f4       	brtc	.+16     	; 0x3c0 <__divmodsi4_exit>
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <__negsi2>

000003b2 <__divmodsi4_neg2>:
 3b2:	50 95       	com	r21
 3b4:	40 95       	com	r20
 3b6:	30 95       	com	r19
 3b8:	21 95       	neg	r18
 3ba:	3f 4f       	sbci	r19, 0xFF	; 255
 3bc:	4f 4f       	sbci	r20, 0xFF	; 255
 3be:	5f 4f       	sbci	r21, 0xFF	; 255

000003c0 <__divmodsi4_exit>:
 3c0:	08 95       	ret

000003c2 <__negsi2>:
 3c2:	90 95       	com	r25
 3c4:	80 95       	com	r24
 3c6:	70 95       	com	r23
 3c8:	61 95       	neg	r22
 3ca:	7f 4f       	sbci	r23, 0xFF	; 255
 3cc:	8f 4f       	sbci	r24, 0xFF	; 255
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
 3d0:	08 95       	ret

000003d2 <__udivmodsi4>:
 3d2:	a1 e2       	ldi	r26, 0x21	; 33
 3d4:	1a 2e       	mov	r1, r26
 3d6:	aa 1b       	sub	r26, r26
 3d8:	bb 1b       	sub	r27, r27
 3da:	fd 01       	movw	r30, r26
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <__udivmodsi4_ep>

000003de <__udivmodsi4_loop>:
 3de:	aa 1f       	adc	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	ee 1f       	adc	r30, r30
 3e4:	ff 1f       	adc	r31, r31
 3e6:	a2 17       	cp	r26, r18
 3e8:	b3 07       	cpc	r27, r19
 3ea:	e4 07       	cpc	r30, r20
 3ec:	f5 07       	cpc	r31, r21
 3ee:	20 f0       	brcs	.+8      	; 0x3f8 <__udivmodsi4_ep>
 3f0:	a2 1b       	sub	r26, r18
 3f2:	b3 0b       	sbc	r27, r19
 3f4:	e4 0b       	sbc	r30, r20
 3f6:	f5 0b       	sbc	r31, r21

000003f8 <__udivmodsi4_ep>:
 3f8:	66 1f       	adc	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	1a 94       	dec	r1
 402:	69 f7       	brne	.-38     	; 0x3de <__udivmodsi4_loop>
 404:	60 95       	com	r22
 406:	70 95       	com	r23
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	9b 01       	movw	r18, r22
 40e:	ac 01       	movw	r20, r24
 410:	bd 01       	movw	r22, r26
 412:	cf 01       	movw	r24, r30
 414:	08 95       	ret

00000416 <_exit>:
 416:	f8 94       	cli

00000418 <__stop_program>:
 418:	ff cf       	rjmp	.-2      	; 0x418 <__stop_program>
