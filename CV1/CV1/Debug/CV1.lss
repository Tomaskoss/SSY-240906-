
CV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001699  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001373  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000514  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00003214  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000939  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000017a  00000000  00000000  00003b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00003ceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
   2:	00 00       	nop
   4:	a1 c0       	rjmp	.+322    	; 0x148 <__bad_interrupt>
   6:	00 00       	nop
   8:	9f c0       	rjmp	.+318    	; 0x148 <__bad_interrupt>
   a:	00 00       	nop
   c:	9d c0       	rjmp	.+314    	; 0x148 <__bad_interrupt>
   e:	00 00       	nop
  10:	9b c0       	rjmp	.+310    	; 0x148 <__bad_interrupt>
  12:	00 00       	nop
  14:	99 c0       	rjmp	.+306    	; 0x148 <__bad_interrupt>
  16:	00 00       	nop
  18:	97 c0       	rjmp	.+302    	; 0x148 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	95 c0       	rjmp	.+298    	; 0x148 <__bad_interrupt>
  1e:	00 00       	nop
  20:	93 c0       	rjmp	.+294    	; 0x148 <__bad_interrupt>
  22:	00 00       	nop
  24:	91 c0       	rjmp	.+290    	; 0x148 <__bad_interrupt>
  26:	00 00       	nop
  28:	8f c0       	rjmp	.+286    	; 0x148 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8d c0       	rjmp	.+282    	; 0x148 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8b c0       	rjmp	.+278    	; 0x148 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__bad_interrupt>
  36:	00 00       	nop
  38:	87 c0       	rjmp	.+270    	; 0x148 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	85 c0       	rjmp	.+266    	; 0x148 <__bad_interrupt>
  3e:	00 00       	nop
  40:	83 c0       	rjmp	.+262    	; 0x148 <__bad_interrupt>
  42:	00 00       	nop
  44:	81 c0       	rjmp	.+258    	; 0x148 <__bad_interrupt>
  46:	00 00       	nop
  48:	7f c0       	rjmp	.+254    	; 0x148 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7d c0       	rjmp	.+250    	; 0x148 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7b c0       	rjmp	.+246    	; 0x148 <__bad_interrupt>
  52:	00 00       	nop
  54:	79 c0       	rjmp	.+242    	; 0x148 <__bad_interrupt>
  56:	00 00       	nop
  58:	77 c0       	rjmp	.+238    	; 0x148 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	75 c0       	rjmp	.+234    	; 0x148 <__bad_interrupt>
  5e:	00 00       	nop
  60:	73 c0       	rjmp	.+230    	; 0x148 <__bad_interrupt>
  62:	00 00       	nop
  64:	71 c0       	rjmp	.+226    	; 0x148 <__bad_interrupt>
  66:	00 00       	nop
  68:	6f c0       	rjmp	.+222    	; 0x148 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6d c0       	rjmp	.+218    	; 0x148 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6b c0       	rjmp	.+214    	; 0x148 <__bad_interrupt>
  72:	00 00       	nop
  74:	69 c0       	rjmp	.+210    	; 0x148 <__bad_interrupt>
  76:	00 00       	nop
  78:	67 c0       	rjmp	.+206    	; 0x148 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	65 c0       	rjmp	.+202    	; 0x148 <__bad_interrupt>
  7e:	00 00       	nop
  80:	63 c0       	rjmp	.+198    	; 0x148 <__bad_interrupt>
  82:	00 00       	nop
  84:	61 c0       	rjmp	.+194    	; 0x148 <__bad_interrupt>
  86:	00 00       	nop
  88:	5f c0       	rjmp	.+190    	; 0x148 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5d c0       	rjmp	.+186    	; 0x148 <__bad_interrupt>
  8e:	00 00       	nop
  90:	5b c0       	rjmp	.+182    	; 0x148 <__bad_interrupt>
  92:	00 00       	nop
  94:	59 c0       	rjmp	.+178    	; 0x148 <__bad_interrupt>
  96:	00 00       	nop
  98:	57 c0       	rjmp	.+174    	; 0x148 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	55 c0       	rjmp	.+170    	; 0x148 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	53 c0       	rjmp	.+166    	; 0x148 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	51 c0       	rjmp	.+162    	; 0x148 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4f c0       	rjmp	.+158    	; 0x148 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4d c0       	rjmp	.+154    	; 0x148 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4b c0       	rjmp	.+150    	; 0x148 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	49 c0       	rjmp	.+146    	; 0x148 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	47 c0       	rjmp	.+142    	; 0x148 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	45 c0       	rjmp	.+138    	; 0x148 <__bad_interrupt>
  be:	00 00       	nop
  c0:	43 c0       	rjmp	.+134    	; 0x148 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	41 c0       	rjmp	.+130    	; 0x148 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3f c0       	rjmp	.+126    	; 0x148 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3d c0       	rjmp	.+122    	; 0x148 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3b c0       	rjmp	.+118    	; 0x148 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	39 c0       	rjmp	.+114    	; 0x148 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	37 c0       	rjmp	.+110    	; 0x148 <__bad_interrupt>
  da:	00 00       	nop
  dc:	35 c0       	rjmp	.+106    	; 0x148 <__bad_interrupt>
  de:	00 00       	nop
  e0:	33 c0       	rjmp	.+102    	; 0x148 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	31 c0       	rjmp	.+98     	; 0x148 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	2f c0       	rjmp	.+94     	; 0x148 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	2d c0       	rjmp	.+90     	; 0x148 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	2b c0       	rjmp	.+86     	; 0x148 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	29 c0       	rjmp	.+82     	; 0x148 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	27 c0       	rjmp	.+78     	; 0x148 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	25 c0       	rjmp	.+74     	; 0x148 <__bad_interrupt>
  fe:	00 00       	nop
 100:	23 c0       	rjmp	.+70     	; 0x148 <__bad_interrupt>
 102:	00 00       	nop
 104:	21 c0       	rjmp	.+66     	; 0x148 <__bad_interrupt>
 106:	00 00       	nop
 108:	1f c0       	rjmp	.+62     	; 0x148 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	1d c0       	rjmp	.+58     	; 0x148 <__bad_interrupt>
 10e:	00 00       	nop
 110:	1b c0       	rjmp	.+54     	; 0x148 <__bad_interrupt>
 112:	00 00       	nop
 114:	19 c0       	rjmp	.+50     	; 0x148 <__bad_interrupt>
 116:	00 00       	nop
 118:	17 c0       	rjmp	.+46     	; 0x148 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	15 c0       	rjmp	.+42     	; 0x148 <__bad_interrupt>
 11e:	00 00       	nop
 120:	13 c0       	rjmp	.+38     	; 0x148 <__bad_interrupt>
 122:	00 00       	nop
 124:	11 c0       	rjmp	.+34     	; 0x148 <__bad_interrupt>
 126:	00 00       	nop
 128:	0f c0       	rjmp	.+30     	; 0x148 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	0d c0       	rjmp	.+26     	; 0x148 <__bad_interrupt>
 12e:	00 00       	nop
 130:	0b c0       	rjmp	.+22     	; 0x148 <__bad_interrupt>
	...

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e8       	ldi	r29, 0x81	; 129
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	00 e0       	ldi	r16, 0x00	; 0
 142:	0c bf       	out	0x3c, r16	; 60
 144:	02 d0       	rcall	.+4      	; 0x14a <main>
 146:	62 c0       	rjmp	.+196    	; 0x20c <_exit>

00000148 <__bad_interrupt>:
 148:	5b cf       	rjmp	.-330    	; 0x0 <__vectors>

0000014a <main>:
	//PORTB = 0b01000000;
	//_delay_loop_2(0xFFFF);
	//PORTB = 0b00000000;
	//_delay_loop_2(0xFFFF);
	 
    DDRB = 0b01110000;  // Nastaví piny 4, 5, 6 jako výstupy (pro LED na bitech 4, 5, 6)
 14a:	80 e7       	ldi	r24, 0x70	; 112
 14c:	84 b9       	out	0x04, r24	; 4

	    // ** Binární zápis pro zapnutí LED diod **

	    // LED0 (bit 4) zapnutí
	    PORTB = 0b00010000;  // Zapnutí LED0 na pinu 4
 14e:	40 e1       	ldi	r20, 0x10	; 16
 150:	45 b9       	out	0x05, r20	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	9f ef       	ldi	r25, 0xFF	; 255
 156:	fc 01       	movw	r30, r24
 158:	31 97       	sbiw	r30, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xe>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // LED1 (bit 5) zapnutí
	    PORTB = 0b00100000;  // Zapnutí LED1 na pinu 5
 15c:	30 e2       	ldi	r19, 0x20	; 32
 15e:	35 b9       	out	0x05, r19	; 5
 160:	fc 01       	movw	r30, r24
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x18>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // LED2 (bit 6) zapnutí
	    PORTB = 0b01000000;  // Zapnutí LED2 na pinu 6
 166:	20 e4       	ldi	r18, 0x40	; 64
 168:	25 b9       	out	0x05, r18	; 5
 16a:	fc 01       	movw	r30, r24
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <main+0x22>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // ** Dekadický zápis pro zapnutí LED diod **

	    PORTB = 16;  // Zapnutí LED0 (bit 4) v dekadickém zápisu
 170:	45 b9       	out	0x05, r20	; 5
 172:	fc 01       	movw	r30, r24
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x2a>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    PORTB = 32;  // Zapnutí LED1 (bit 5) v dekadickém zápisu
 178:	35 b9       	out	0x05, r19	; 5
 17a:	fc 01       	movw	r30, r24
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0x32>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    PORTB = 64;  // Zapnutí LED2 (bit 6) v dekadickém zápisu
 180:	25 b9       	out	0x05, r18	; 5
 182:	fc 01       	movw	r30, r24
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x3a>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // ** Hexadecimální zápis pro zapnutí LED diod **

	    PORTB = 0x10;  // Zapnutí LED0 (bit 4) v hexadecimálním zápisu
 188:	45 b9       	out	0x05, r20	; 5
 18a:	fc 01       	movw	r30, r24
 18c:	31 97       	sbiw	r30, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x42>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    PORTB = 0x20;  // Zapnutí LED1 (bit 5) v hexadecimálním zápisu
 190:	35 b9       	out	0x05, r19	; 5
 192:	fc 01       	movw	r30, r24
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <main+0x4a>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    PORTB = 0x40;  // Zapnutí LED2 (bit 6) v hexadecimálním zápisu
 198:	25 b9       	out	0x05, r18	; 5
 19a:	fc 01       	movw	r30, r24
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x52>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // ** Použití maker pro zapnutí/vypnutí LED diod **
	    
	    setbit(PORTB, 4);  // Zapnutí LED0 pomocí makra setbit (bit 4)
 1a0:	55 b1       	in	r21, 0x05	; 5
 1a2:	50 61       	ori	r21, 0x10	; 16
 1a4:	55 b9       	out	0x05, r21	; 5
 1a6:	fc 01       	movw	r30, r24
 1a8:	31 97       	sbiw	r30, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x5e>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    setbit(PORTB, 5);  // Zapnutí LED1 pomocí makra setbit (bit 5)
 1ac:	55 b1       	in	r21, 0x05	; 5
 1ae:	50 62       	ori	r21, 0x20	; 32
 1b0:	55 b9       	out	0x05, r21	; 5
 1b2:	fc 01       	movw	r30, r24
 1b4:	31 97       	sbiw	r30, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <main+0x6a>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    setbit(PORTB, 6);  // Zapnutí LED2 pomocí makra setbit (bit 6)
 1b8:	55 b1       	in	r21, 0x05	; 5
 1ba:	50 64       	ori	r21, 0x40	; 64
 1bc:	55 b9       	out	0x05, r21	; 5
 1be:	fc 01       	movw	r30, r24
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <main+0x76>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    clearbit(PORTB, 4);  // Vypnutí LED0 pomocí makra clearbit (bit 4)
 1c4:	55 b1       	in	r21, 0x05	; 5
 1c6:	5f 7e       	andi	r21, 0xEF	; 239
 1c8:	55 b9       	out	0x05, r21	; 5
 1ca:	fc 01       	movw	r30, r24
 1cc:	31 97       	sbiw	r30, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <main+0x82>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    clearbit(PORTB, 5);  // Vypnutí LED1 pomocí makra clearbit (bit 5)
 1d0:	55 b1       	in	r21, 0x05	; 5
 1d2:	5f 7d       	andi	r21, 0xDF	; 223
 1d4:	55 b9       	out	0x05, r21	; 5
 1d6:	fc 01       	movw	r30, r24
 1d8:	31 97       	sbiw	r30, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <main+0x8e>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    clearbit(PORTB, 6);  // Vypnutí LED2 pomocí makra clearbit (bit 6)
 1dc:	55 b1       	in	r21, 0x05	; 5
 1de:	5f 7b       	andi	r21, 0xBF	; 191
 1e0:	55 b9       	out	0x05, r21	; 5
 1e2:	fc 01       	movw	r30, r24
 1e4:	31 97       	sbiw	r30, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <main+0x9a>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní

	    // ** Použití XOR pro zm?nu stavu LED diod **
	    xorbit(PORTB, 4);  // Zm?na stavu LED0 pomocí makra xorbit (bit 4)
 1e8:	55 b1       	in	r21, 0x05	; 5
 1ea:	45 27       	eor	r20, r21
 1ec:	45 b9       	out	0x05, r20	; 5
 1ee:	fc 01       	movw	r30, r24
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0xa6>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    xorbit(PORTB, 5);  // Zm?na stavu LED1 pomocí makra xorbit (bit 5)
 1f4:	45 b1       	in	r20, 0x05	; 5
 1f6:	34 27       	eor	r19, r20
 1f8:	35 b9       	out	0x05, r19	; 5
 1fa:	fc 01       	movw	r30, r24
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0xb2>
	    _delay_loop_2(0xFFFF);  // Zpožd?ní
	    xorbit(PORTB, 6);  // Zm?na stavu LED2 pomocí makra xorbit (bit 6)
 200:	35 b1       	in	r19, 0x05	; 5
 202:	23 27       	eor	r18, r19
 204:	25 b9       	out	0x05, r18	; 5
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0xbc>
 20a:	9f cf       	rjmp	.-194    	; 0x14a <main>

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
